{{- if .Values.deploy -}}
apiVersion: camel.apache.org/v1
kind: Integration
metadata:
  name: {{ include "transcript-integration.name" . }}
  labels:
    {{- include "transcript-integration.labels" . | nindent 4 }}
  annotations:
    {{- include "transcript-integration.argocd-syncwave" . | nindent 4 }}
spec:
  dependencies:
    - 'camel:amqp'
    - 'camel:jackson'
    - 'camel:pdf'
    - 'camel:joor'
    - 'camel:kafka'
    - 'camel:language'
    - 'mvn:io.quarkiverse.messaginghub:quarkus-pooled-jms:1.1.0'
  sources:
    - content: >-
        <?xml version="1.0" encoding="UTF-8"?>
        <!-- camel-k: language=xml -->
        
        <routes xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                xmlns="http://camel.apache.org/schema/spring"\n        xsi:schemaLocation="\n            http://camel.apache.org/schema/spring\n            http://camel.apache.org/schema/spring/camel-spring.xsd">\n\n\n\t<!-- Write your routes here, for example: -->\n    <route id="process">\n        <from uri="direct:process"/>\n\n        <setProperty name="client">\n            <simple>${body}</simple>\n        </setProperty>\n\n        <log message="Initiating KAFKA processor for: ${exchangeProperty.client}"/>\n\n        <setProperty name="continue">\n            <simple>true</simple>\n        </setProperty>\n\n        <loop doWhile="true">\n            <simple>${exchangeProperty.continue}</simple>\n\n            <pollEnrich>\n                <simple>kafka:support.${env.NAMESPACE}.${exchangeProperty.client}?autoOffsetReset=earliest</simple>\n            </pollEnrich>\n\n            <when>\n                <simple>${body} == 'done'</simple>\n                <setProperty name="continue">\n                    <simple>false</simple>\n                </setProperty>\n            </when>\n\n            <log message="source is: ${header.source}"/>\n            <log message="got message: ${body}"/>\n\n            <aggregate strategyRef="myStrategy">\n                <correlationExpression>\n                    <constant>true</constant>\n                </correlationExpression>\n                <completionPredicate>\n                    <simple>${exchangeProperty.continue} == false</simple>\n                </completionPredicate>\n\n                <log message="aggregation done: ${body}"/>\n\n                <to uri="pdf:create"/>\n                <log message="PDF created."/>\n\n                <to uri="direct:store-pdf"/>\n                <to uri="direct:get-shared-url"/>\n                <to uri="direct:share-transcript"/>\n            </aggregate>\n        </loop>\n        <log message="KAFKA processor done"/>\n    </route>\n\n\n    <route id="store-pdf">\n        <from uri="direct:store-pdf"/>                                       <!-- 1 -->\n\n        <setProperty name="store-key">\n            <simple>transcript_${date:now:yyyy-MM-dd_HH-mm-ss}.pdf</simple>  <!-- 2 -->\n        </setProperty>\n\n        <setHeader name="CamelFileName">                                     <!-- 3 -->\n            <simple>${exchangeProperty.store-key}</simple>\n        </setHeader>\n\n        <setHeader name="CamelAwsS3Key">                                     <!-- 3 -->\n            <simple>${exchangeProperty.store-key}</simple>\n        </setHeader>\n\n        <setHeader name="CamelAwsS3ContentType">                             <!-- 3 -->\n            <simple>application/pdf</simple>\n        </setHeader>\n\n        <toD uri="aws2-s3:pdf.bucket"/>                                      <!-- 4 -->\n        <log message="PDF stored"/>\n    </route>\n\n\n    <route id="share-transcript">\n        <from uri="direct:share-transcript"/>                                       <!-- 1 -->\n\n        <log message="context is: ${exchangeProperty.context}"/>                    <!-- 2 -->\n\n        <setBody>\n            <simple>${exchangeProperty.context}</simple>                            <!-- 3 -->\n        </setBody>\n\n        <to uri="direct:recycle-context"/>                                          <!-- 4 -->\n\n        <log message="AMQP to send out: ${body}"/>\n\n        <toD uri="amqp:topic:support.${exchangeProperty.source}?connectionFactory=#myFactory"/>  <!-- 5 -->\n    </route>\n\n</routes>     name: transcript.xml
    - content: >-
        <?xml version="1.0" encoding="UTF-8"?>

        <!-- camel-k: language=xml -->


        <routes xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                xmlns="http://camel.apache.org/schema/spring"
                xsi:schemaLocation="
                    http://camel.apache.org/schema/spring
                    https://camel.apache.org/schema/spring/camel-spring.xsd">

            <route id="get-s3-token">
                <from uri="direct:get-s3-token"/>

                <setProperty name="minioserver">
                    <simple>{{`{{minio.url}}`}}</simple>
                </setProperty>
                <removeHeaders pattern="*"/>
                <setHeader name="Content-Type">
                    <simple>application/json</simple>
                </setHeader>
                <setHeader name="User-Agent">
                    <simple>Mozilla/5.0</simple>
                </setHeader>
                <setBody>
                    <simple>
        {"id":1,"jsonrpc":"2.0","params":{"username":"{{`{{camel.component.aws2-s3.accessKey}}`}}","password":"{{`{{camel.component.aws2-s3.secretKey}}`}}"},"method":"web.Login"}
                    </simple>
                </setBody>
                <toD uri="https:${exchangeProperty.minioserver}/minio/webrpc"/>
                <convertBodyTo type="String"/>
                <log message="response: ${body}"/>

                <unmarshal>
                    <json/>
                </unmarshal>

                <setProperty name="s3-token">
                    <simple>${body.get(result).get(token)}</simple>
                </setProperty>
            </route>

            <route id="get-shared-url">
                <from uri="direct:get-shared-url"/>

                <to uri="direct:get-s3-token"/>

                <setProperty name="minioserver">
                    <simple>{{`{{minio.url}}`}}</simple>
                </setProperty>

                <removeHeaders pattern="*"/>
                <setHeader name="Authorization">
                    <simple>Bearer ${exchangeProperty.s3-token}</simple>
                </setHeader>
                <setHeader name="content-type">
                    <simple>application/json</simple>
                </setHeader>
                <setHeader name="User-Agent">
                    <simple>Mozilla/5.0</simple>
                </setHeader>
                <setBody>
                    <simple>
        {"id":1,"jsonrpc":"2.0","params":{"host":"${exchangeProperty.minioserver}","bucket":"pdf.bucket","object":"${exchangeProperty.store-key}","expiry":432000},"method":"web.PresignedGet"}
                    </simple>
                </setBody>

                <toD uri="https:${exchangeProperty.minioserver}/minio/webrpc"/>
                <convertBodyTo type="String"/>
                <log message="response: ${body}"/>

                <unmarshal>
                    <json/>
                </unmarshal>

                <setBody>
                    <simple>https://${body.get(result).get(url)}</simple>
                </setBody>

                <log message="URL: ${body}"/>

                <setProperty name="transcripturl">
                    <joor>java.net.URLEncoder.encode(message.getBody(String.class))</joor>
                </setProperty>
                <setProperty name="transcripturl-raw">
                    <simple>${body}</simple>
                </setProperty>
                <log message="transcripturl: ${exchangeProperty.transcripturl}"/>
            </route>


            <route id="recycle-context">
                <from uri="direct:recycle-context"/>

                <unmarshal>
                    <json/>
                </unmarshal>

                <setProperty name="source">
                    <simple>${body.get(source).get(uname)}</simple>
                </setProperty>

                <choice>
                    <when>
                        <simple>${exchangeProperty.source} == 'rocketchat'</simple>
                        <to uri="language:simple:${body.replace(text, '[PDF transcript](${exchangeProperty.transcripturl-raw})')}?transform=false"/>
                    </when>
                    <otherwise>
                        <to uri="language:simple:${body.replace(text, 'PDF transcript' )}?transform=false"/>
                        <to uri="language:simple:${body.put(pdf, '${exchangeProperty.transcripturl-raw}' )}?transform=false"/>
                    </otherwise>
                </choice>

                <marshal>
                    <json/>
                </marshal>

            </route>


        </routes>
      name: transcript-support.xml
    - content: |
        // camel-k: language=java

        import javax.jms.ConnectionFactory;
        import org.apache.camel.PropertyInject;
        import org.apache.camel.builder.RouteBuilder;
        import org.apache.qpid.jms.JmsConnectionFactory;
        import org.messaginghub.pooled.jms.JmsPoolConnectionFactory;
        import org.slf4j.Logger;
        import org.slf4j.LoggerFactory;

        public class CamelJmsConnectionFactory extends RouteBuilder {
            
            private static final Logger LOGGER = LoggerFactory.getLogger(CamelJmsConnectionFactory.class);

            @PropertyInject("broker.amqp.uri")
            private static String uri;

            @PropertyInject("broker.amqp.connections")
            private static int maxConnections;

            @Override
            public void configure() {
                JmsPoolConnectionFactory myFactory = createConnectionFactory();
                getContext().getRegistry().bind("myFactory", myFactory);
            }

            private JmsPoolConnectionFactory createConnectionFactory() {
                
                ConnectionFactory factory = new JmsConnectionFactory(uri);
                JmsPoolConnectionFactory pool = new JmsPoolConnectionFactory();

                try {
                    pool.setConnectionFactory(factory);

                    // Set the max connections per user to a higher value
                    pool.setMaxConnections(maxConnections);

                } catch (Exception e) {
                    LOGGER.error("Exception creating JMS Connection Factory", e);
                }

                return pool;
            }
        }
      name: CamelJmsConnectionFactory.java
    - content: |
        // camel-k: language=java

        //Camel API
        import org.apache.camel.AggregationStrategy;
        import org.apache.camel.BindToRegistry;
        import org.apache.camel.Exchange;
        import org.apache.camel.Processor;
        import org.apache.camel.PropertyInject;
        import org.apache.camel.builder.RouteBuilder;

        //Java API
        import java.io.ByteArrayInputStream;
        import java.io.ByteArrayOutputStream;
        import java.util.ArrayList;
        import java.util.HashMap;
        import java.util.Map;


        public class Aggregation extends RouteBuilder {
            
            //dummy
            @Override
            public void configure() throws Exception {}


            @BindToRegistry
            public static AggregationStrategy myStrategy(){

                return new AggregationStrategy() {
                    public Exchange aggregate(Exchange oldExchange, Exchange newExchange) {

                        if (oldExchange == null) {
                            return newExchange;
                        }

                        oldExchange.setProperty("continue", newExchange.getProperty("continue"));

                        //ignore last message (body is 'done')
                        if (newExchange.getProperty("continue").equals("false")) {
                        
                            oldExchange.setProperty("context", newExchange.getIn().getHeader("context"));
                            oldExchange.setProperty("source",  newExchange.getIn().getHeader("source" ));
                            return oldExchange;
                        }

                        String oldBody = oldExchange.getIn().getBody(String.class);
                        String newBody = newExchange.getIn().getBody(String.class);
                        oldExchange.getIn().setBody(oldBody + "\n" + newBody);

                        return oldExchange;
                    }
                };
            }

        }
      name: Aggregation.java
    - content: |
        // camel-k: language=java

        import org.apache.camel.builder.RouteBuilder;

        public class KafkaListener extends RouteBuilder {

            @Override
            public void configure() throws Exception {

                String instanceId = System.getenv("NAMESPACE");
                String kafkaUri   = "kafka:support." + instanceId + ".closed";

                // Write your routes here, for example:
                from(kafkaUri)
                .routeId("kafka-consumer")
                .to("direct:process");
            }
        }
      name: KafkaListener.java
  traits:
    camel:
      configuration:
        properties:
          - broker.amqp.connections = 5
          - broker.amqp.topic.clients.slack = support.slack.client.
          - broker.amqp.topic.clients.globex = support.globex.client.
          - broker.amqp.topic.agents = support.
          - camel.component.aws2-s3.region = us-east-1
          - 'camel.component.aws2-s3.uriEndpointOverride = http://{{ .Values.minio.service }}:9000'
          - camel.component.aws2-s3.overrideEndpoint = true
          - camel.component.aws2-s3.useDefaultCredentialsProvider = false
          - camel.component.aws2-s3.autoCreateBucket = true
    mount:
      configuration:
        configs:
          - 'secret:client-amq'
          - 'secret:client-kafka'
          - 'secret:client-s3'
{{- end }}